#! /usr/bin/env python
# -*- coding:utf-8 -*-

if __name__ == "__main__":
    print("该程序块仅在该模块自身运行时执行")
else:
    print("在外部模块运行!")


def printdata(data):
    print("data:", data)


""" 
Python有一些内置变量，它们提供了有关Python环境和一些运行时信息的信息。以下是一些常见的内置变量：
    __name__：这个内置变量用于确定Python脚本是被直接运行还是被导入为模块。当一个脚本被直接运行时，__name__ 的值为 "__main__"；当一个脚本被导入为模块时，__name__ 的值为模块的名称。
    __doc__：这个内置变量用于获取模块、类、函数等的文档字符串（docstring）。文档字符串通常包含关于模块、类或函数的说明和文档信息。
    __file__：用于获取模块的文件路径，如果模块不是从文件中导入的，则该变量为 None。
    __builtins__：一个包含Python的内置函数和异常的字典，可以用来访问Python的内置函数和异常。
    __package__：用于获取模块的包名称，如果模块不属于任何包，则该变量为 None。
    __cached__：用于获取模块的编译后的缓存文件路径。
    __loader__：用于获取模块的加载器对象，可以用来加载模块。
这些内置变量在Python中用于提供运行时信息和访问模块、函数等的相关信息。你可以使用这些变量来探索和操作Python程序的运行时环境。
 """