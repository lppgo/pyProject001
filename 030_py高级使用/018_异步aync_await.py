# encoding=utf-8

"""
async:用来声明一个异步函数。
    异步函数的特点是能在函数执行过程中挂起，去执行其他异步函数，等到挂起条件消失后，再回到挂起前的状态执行。

await:
    用来用来声明程序挂起，比如异步程序执行到某一步时需要等待的时间很长，就将此挂起，去执行其他的异步程序。
    await 后面只能跟异步程序或有__await__属性的对象，因为异步程序与一般程序不同
"""


import asyncio

# 定义一个异步函数 fn_1


async def fn_1():
    print("fn_1: Start")
    await asyncio.sleep(3)  # 模拟异步操作
    print("fn_1: End")

# 定义一个同步函数 fn_2


def fn_2():
    print("fn_2: Start")
    # 这里模拟一些同步操作
    print("fn_2: End")

# 定义主函数 main，其中调用异步函数和同步函数


# --------------------------------------------------------------------------------------------------------

# 定义主函数 main，其中调用异步函数和同步函数
# async def main():
#     # 创建一个任务来运行异步函数 fn_1
#     task_1 = asyncio.create_task(fn_1())

#     # 创建一个线程来运行同步函数 fn_2
#     loop = asyncio.get_running_loop()
#     await loop.run_in_executor(None, fn_2)

#     # 等待异步函数 fn_1 完成
#     await task_1


# 定义主函数 main，其中调用异步函数和同步函数
async def main():
    # 创建并启动异步任务
    asyncio.create_task(fn_1())

    # 直接调用同步函数
    fn_2()

    # 如果需要，主函数可以继续做其他事情
    # 或者如果你希望不等异步任务完成就直接退出，可以选择不等待任何任务


# --------------------------------------------------------------------------------------------------------

# 运行事件循环，执行主函数
if __name__ == "__main__":
    asyncio.run(main())
